@model AspnetCoreMvcFull.ViewModels.SubmittedReportViewModel

@{
	ViewData["Title"] = "Report Details";
	Layout = "~/Views/Shared/_ContentNavbarLayout.cshtml";
}

<div class="container mt-4">
	<div class="card shadow-sm mb-4">
		<div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
			<h4 class="mb-0">
				<i class="fas fa-clipboard-list me-2"></i>Bin Report Details
			</h4>
			<div class="d-flex align-items-center">
				@* NEW: Severity Badge *@
				@if (!string.IsNullOrEmpty(Model.Severity))
				{
					@if (Model.Severity == "Critical")
					{
						<span class="badge bg-danger me-2">
							<i class="fas fa-exclamation-circle me-1"></i>Critical
						</span>
					}
					else if (Model.Severity == "High")
					{
						<span class="badge bg-warning me-2">
							<i class="fas fa-exclamation-triangle me-1"></i>High
						</span>
					}
					else if (Model.Severity == "Medium")
					{
						<span class="badge bg-info me-2">
							<i class="fas fa-info-circle me-1"></i>Medium
						</span>
					}
					else if (Model.Severity == "Low")
					{
						<span class="badge bg-secondary me-2">
							<i class="fas fa-minus me-1"></i>Low
						</span>
					}
				}
				@if (Model.IsIssueReported)
				{
					<span class="badge bg-warning me-2">
						<i class="fas fa-exclamation-triangle me-1"></i>Issue Reported
					</span>
				}
				<span class="badge bg-light text-dark">
					Status: <span class="fw-bold text-@GetStatusColor(Model.Status)">@Model.Status.ToUpper()</span>
				</span>
			</div>
		</div>
		<div class="card-body">
			<div class="row">
				<div class="col-md-6">
					<div class="card mb-3">
						<div class="card-header bg-light">
							<h5 class="mb-0">
								<i class="fas fa-trash me-2 text-secondary"></i>Bin Information
							</h5>
						</div>
						<div class="card-body">
							<div class="mb-3">
								<label class="form-label text-muted">Bin Plate ID</label>
								<div class="input-group">
									<span class="input-group-text"><i class="fas fa-barcode"></i></span>
									<input type="text" class="form-control" value="@Model.BinPlateId" readonly>
								</div>
							</div>
							<div class="mb-3">
								<label class="form-label text-muted">Location</label>
								<div class="input-group">
									<span class="input-group-text"><i class="fas fa-map-marker-alt"></i></span>
									<input type="text" class="form-control" value="@Model.BinLocation" readonly>
								</div>
							</div>
							<div class="mb-3">
								<label class="form-label text-muted">Client</label>
								<div class="input-group">
									<span class="input-group-text"><i class="fas fa-building"></i></span>
									<input type="text" class="form-control" value="@Model.ClientName" readonly>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="col-md-6">
					<div class="card mb-3">
						<div class="card-header bg-light">
							<h5 class="mb-0">
								<i class="fas fa-info-circle me-2 text-info"></i>Report Information
							</h5>
						</div>
						<div class="card-body">
							<div class="mb-3">
								<label class="form-label text-muted">Report ID</label>
								<div class="input-group">
									<span class="input-group-text"><i class="fas fa-hashtag"></i></span>
									<input type="text" class="form-control" value="@Model.CollectionRecordId" readonly>
								</div>
							</div>
							<div class="mb-3">
								<label class="form-label text-muted">Reported At</label>
								<div class="input-group">
									<span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
									<input type="text" class="form-control" value="@Model.PickupTimestamp.ToString("MM/dd/yyyy hh:mm tt")" readonly>
								</div>
							</div>
							@* NEW: Severity Field *@
							@if (!string.IsNullOrEmpty(Model.Severity))
							{
								<div class="mb-3">
									<label class="form-label text-muted">Severity Level</label>
									<div class="input-group">
										<span class="input-group-text"><i class="fas fa-exclamation-circle"></i></span>
										<input type="text" class="form-control" value="@Model.Severity" readonly>
									</div>
								</div>
							}
							@* NEW: Reported By Field *@
							@if (!string.IsNullOrEmpty(Model.ReportedBy))
							{
								<div class="mb-3">
									<label class="form-label text-muted">Reported By</label>
									<div class="input-group">
										<span class="input-group-text"><i class="fas fa-user"></i></span>
										<input type="text" class="form-control" value="@Model.ReportedBy" readonly>
									</div>
								</div>
							}
							<div class="mb-3">
								<label class="form-label text-muted">Status</label>
								<select id="statusSelect" class="form-select" data-report-id="@Model.CollectionRecordId" data-current-status="@Model.Status">
									<option value="pending">Pending</option>
									<option value="acknowledged">Acknowledged</option>
									<option value="resolved">Resolved</option>
									<option value="closed">Closed</option>
								</select>
							</div>
							@* NEW: Acknowledged By and At *@
							@if (!string.IsNullOrEmpty(Model.AcknowledgedBy))
							{
								<div class="mb-3">
									<label class="form-label text-muted">Acknowledged By</label>
									<div class="input-group">
										<span class="input-group-text"><i class="fas fa-user-check"></i></span>
										<input type="text" class="form-control" value="@Model.AcknowledgedBy" readonly>
									</div>
								</div>
							}
							@if (Model.AcknowledgedAt.HasValue)
							{
								<div class="mb-3">
									<label class="form-label text-muted">Acknowledged At</label>
									<div class="input-group">
										<span class="input-group-text"><i class="fas fa-clock"></i></span>
										<input type="text" class="form-control" value="@Model.AcknowledgedAt.Value.ToString("MM/dd/yyyy hh:mm tt")" readonly>
									</div>
								</div>
							}
							<div class="mb-3">
								<label class="form-label text-muted">Issue Flag</label>
								<div class="form-control-plaintext">
									@if (Model.IsIssueReported)
									{
										<span class="badge bg-warning">
											<i class="fas fa-exclamation-triangle me-1"></i>Flagged as Issue
										</span>
									}
									else
									{
										<span class="badge bg-success">
											<i class="fas fa-check me-1"></i>Normal Report
										</span>
									}
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>

			@if (!string.IsNullOrEmpty(Model.Description))
			{
				<div class="card mb-3 @(Model.IsIssueReported ? "border-warning" : "")">
					<div class="card-header @(Model.IsIssueReported ? "bg-warning bg-opacity-25" : "bg-light")">
						<h5 class="mb-0 @(Model.IsIssueReported ? "text-warning" : "")">
							<i class="fas @(Model.IsIssueReported ? "fa-exclamation-triangle" : "fa-comment") me-2"></i>
							@(Model.IsIssueReported ? "Issue Report" : "Description")
						</h5>
					</div>
					<div class="card-body">
						<p class="mb-0" style="white-space: pre-wrap;">@Model.Description</p>
					</div>
				</div>
			}
			else
			{
				<div class="card mb-3">
					<div class="card-body text-center text-muted">
						<i class="fas fa-comment-slash fa-2x mb-2"></i>
						<p>No description provided for this report</p>
					</div>
				</div>
			}

			@if (!string.IsNullOrEmpty(Model.ImageUrl))
			{
				<div class="card mb-3">
					<div class="card-header bg-light">
						<h5 class="mb-0">
							<i class="fas fa-camera me-2 text-success"></i>Report Image
						</h5>
					</div>
					<div class="card-body text-center">
						<img src="@Model.ImageUrl" alt="Report Image" class="img-fluid rounded shadow-sm mb-3" style="max-height: 400px;">
						<div class="d-flex justify-content-center gap-2">
							<button type="button" class="btn btn-primary" onclick="openImageModal('@Model.ImageUrl')">
								<i class="fas fa-search-plus me-2"></i>View Full Size
							</button>
							<a href="@Model.ImageUrl" download class="btn btn-outline-secondary">
								<i class="fas fa-download me-2"></i>Download
							</a>
						</div>
						@if (!string.IsNullOrEmpty(Model.FileName))
						{
							<div class="mt-3 text-muted">
								<small>
									<i class="fas fa-file me-1"></i>@Model.FileName
									@if (Model.FileSize > 0)
									{
										<span class="ms-2">
											<i class="fas fa-weight me-1"></i>@((Model.FileSize / 1024.0).ToString("F1")) KB
										</span>
									}
								</small>
							</div>
						}
					</div>
				</div>
			}
			else
			{
				<div class="card mb-3">
					<div class="card-body text-center text-muted">
						<i class="fas fa-image fa-3x mb-3"></i>
						<p>No image attached to this report</p>
					</div>
				</div>
			}
		</div>
		<div class="card-footer">
			<div class="d-flex justify-content-between">
				<a asp-action="SubmittedReports" class="btn btn-secondary">
					<i class="fas fa-arrow-left me-2"></i>Back to Reports
				</a>
				<div>
					@* NEW: Acknowledge Button *@
					@if (Model.Status == "pending")
					{
						<button type="button" class="btn btn-warning me-2" onclick="acknowledgeReport('@Model.CollectionRecordId', '@Model.BinPlateId')">
							<i class="fas fa-check me-2"></i>Acknowledge
						</button>
					}
					<button id="updateStatusBtn" class="btn btn-success">
						<i class="fas fa-save me-2"></i>Update Status
					</button>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Image Modal -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-xl">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="imageModalLabel">Report Image - @Model.BinPlateId</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body text-center">
				<img id="modalImage" src="/placeholder.svg" alt="Report Image" class="img-fluid">
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<a id="downloadImageLink" href="@Model.ImageUrl" download class="btn btn-primary">
					<i class="fas fa-download me-2"></i>Download
				</a>
			</div>
		</div>
	</div>
</div>

<!-- Acknowledge Modal -->
<div class="modal fade" id="acknowledgeModal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Acknowledge Report</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
			</div>
			<form id="acknowledgeForm" method="post">
				<div class="modal-body">
					<p>Acknowledge report for <strong id="modalBinId"></strong>?</p>
					<div class="mb-3">
						<label class="form-label">Resolution Notes (Optional)</label>
						<textarea name="resolutionNotes" class="form-control" rows="3"
								  placeholder="Add resolution notes to mark as resolved..."></textarea>
						<div class="form-text">Leave empty to just acknowledge, or add notes to resolve completely.</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
					<button type="submit" class="btn btn-primary">Acknowledge</button>
				</div>
			</form>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		// Function to open image modal
		function openImageModal(imageUrl) {
			document.getElementById('modalImage').src = imageUrl;
			document.getElementById('downloadImageLink').href = imageUrl;
			new bootstrap.Modal(document.getElementById('imageModal')).show();
		}

		// NEW: Acknowledge function
		function acknowledgeReport(id, binId) {
			document.getElementById('modalBinId').textContent = binId;
			document.getElementById('acknowledgeForm').action = '/BinReport/Acknowledge/' + id;
			new bootstrap.Modal(document.getElementById('acknowledgeModal')).show();
		}

		// Status update functionality
		document.addEventListener('DOMContentLoaded', function() {
			// Set initial selected value for status dropdown
			const statusSelect = document.getElementById('statusSelect');
			const currentStatus = statusSelect.getAttribute('data-current-status');
			statusSelect.value = currentStatus;

			// Rest of your existing code...
			const updateStatusBtn = document.getElementById('updateStatusBtn');
			updateStatusBtn.addEventListener('click', function() {
				const reportId = statusSelect.getAttribute('data-report-id');
				const newStatus = statusSelect.value;
				updateReportStatus(reportId, newStatus);
			});
		});

		function updateReportStatus(reportId, status) {
			// Show loading state
			const updateBtn = document.getElementById('updateStatusBtn');
			const originalBtnHtml = updateBtn.innerHTML;
			updateBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Updating...';
			updateBtn.disabled = true;

			fetch('@Url.Action("UpdateStatus")', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					id: reportId,
					status: status
				})
			})
			.then(response => response.json())
			.then(data => {
				// Reset button state
				updateBtn.innerHTML = originalBtnHtml;
				updateBtn.disabled = false;

				if (data.success) {
					// Show success message
					const alert = document.createElement('div');
					alert.className = 'alert alert-success alert-dismissible fade show';
					alert.innerHTML = `
						<i class="fas fa-check-circle me-2"></i>Status updated successfully!
						<button type="button" class="btn-close" data-bs-dismiss="alert"></button>
					`;
					// Insert alert before the card
					const card = document.querySelector('.card');
					card.parentNode.insertBefore(alert, card);
					// Auto dismiss after 3 seconds
					setTimeout(() => {
						if (alert.parentNode) {
							alert.parentNode.removeChild(alert);
						}
					}, 3000);
				} else {
					alert('Error updating status: ' + data.message);
				}
			})
			.catch(error => {
				console.error('Error:', error);
				alert('Error updating status');
				updateBtn.innerHTML = originalBtnHtml;
				updateBtn.disabled = false;
			});
		}
	</script>
}

@functions {
	string GetStatusColor(string status)
	{
		return status.ToLower() switch
		{
			"pending" => "warning",
			"acknowledged" => "info",
			"resolved" => "success",
			"closed" => "secondary",
			_ => "primary"
		};
	}
}
