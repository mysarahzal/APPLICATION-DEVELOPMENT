@model AspnetCoreMvcFull.ViewModels.ManageClientsBinsViewModel

@{
    ViewData["Title"] = "Client and Bin Management";
}

<div class="container-fluid">
    <!-- Add this right after the container-fluid div -->
    <!-- OpenStreetMap - No API key needed -->
    <style>
        .location-suggestions {
            position: absolute;
            background: white;
            border: 1px solid #ccc;
            border-radius: 4px;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            width: 100%;
            display: none;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .location-suggestion-item {
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid #eee;
            font-size: 14px;
        }

            .location-suggestion-item:hover {
                background-color: #f5f5f5;
            }

            .location-suggestion-item:last-child {
                border-bottom: none;
            }

        .location-input-container {
            position: relative;
        }
    </style>

    <div class="row">
        <div class="col-12">
            <h2 class="mb-4">@ViewData["Title"]</h2>
            <!-- Success/Error Messages -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            <!-- Validation Summary -->
            <div asp-validation-summary="All" class="alert alert-danger" role="alert" style="display: @(ViewData.ModelState.IsValid ? "none" : "block")"></div>
        </div>
    </div>

    <!-- Navigation Tabs -->
    <ul class="nav nav-tabs mb-4" id="managementTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="clients-tab" data-bs-toggle="tab" data-bs-target="#clients" type="button" role="tab">
                <i class="fas fa-users me-2"></i>Clients
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="bins-tab" data-bs-toggle="tab" data-bs-target="#bins" type="button" role="tab">
                <i class="fas fa-trash me-2"></i>Bins
            </button>
        </li>
    </ul>

    <div class="tab-content" id="managementTabsContent">
        <!-- CLIENTS TAB -->
        <div class="tab-pane fade show active" id="clients" role="tabpanel">
            <div class="row">
                <!-- Create Client Form -->
                <div class="col-lg-4 mb-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-plus-circle me-2"></i>Add New Client
                            </h5>
                        </div>
                        <div class="card-body">
                            <form asp-action="CreateClient" method="post" id="createClientForm">
                                <div class="mb-3">
                                    <label asp-for="Client.ClientName" class="form-label"></label>
                                    <input asp-for="Client.ClientName" class="form-control" placeholder="Enter client name" />
                                    <span asp-validation-for="Client.ClientName" class="text-danger"></span>
                                </div>
                                <div class="mb-3">
                                    <label asp-for="Client.Location" class="form-label"></label>
                                    <input asp-for="Client.Location" class="form-control" placeholder="Enter location" />
                                    <span asp-validation-for="Client.Location" class="text-danger"></span>
                                </div>
                                <div class="mb-3">
                                    <label asp-for="Client.NumOfBins" class="form-label"></label>
                                    <input asp-for="Client.NumOfBins" class="form-control" type="number" min="0" placeholder="Enter number of bins" />
                                    <span asp-validation-for="Client.NumOfBins" class="text-danger"></span>
                                </div>
                                <button type="submit" class="btn btn-primary w-100">
                                    <i class="fas fa-save me-2"></i>Create Client
                                </button>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Client List -->
                <div class="col-lg-8">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-list me-2"></i>Client List
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (Model.Clients != null && Model.Clients.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Client Name</th>
                                                <th>Location</th>
                                                <th>Assigned Bins</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var client in Model.Clients)
                                            {
                                                <tr>
                                                    <td>
                                                        <strong>@client.ClientName</strong>
                                                    </td>
                                                    <td>@client.Location</td>
                                                    <td>
                                                        <span class="badge bg-info">@(client.Bins?.Count ?? 0) bins</span>
                                                    </td>
                                                    <td>
                                                        <!-- Edit Button -->
                                                        <button type="button" class="btn btn-primary me-2" onclick="editClient(@client.ClientID)">
                                                            <i class="fas fa-edit me-1"></i>Edit
                                                        </button>
                                                        <!-- Delete Button -->
                                                        <button type="button" class="btn btn-danger" onclick="deleteClient(@client.ClientID, '@client.ClientName')">
                                                            <i class="fas fa-trash me-1"></i>Delete
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-5">
                                    <i class="fas fa-users fa-3x text-muted mb-3"></i>
                                    <p class="text-muted">No clients found. Create your first client to get started.</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- BINS TAB -->
        <div class="tab-pane fade" id="bins" role="tabpanel">
            <div class="row">
                <!-- Create Bin Form -->
                <div class="col-lg-4 mb-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-plus-circle me-2"></i>Add New Bin
                            </h5>
                        </div>
                        <div class="card-body">
                            <form asp-action="CreateBin" method="post" id="createBinForm">
                                <div class="mb-3">
                                    <label asp-for="Bin.BinPlateId" class="form-label"></label>
                                    <input asp-for="Bin.BinPlateId"
                                           class="form-control"
                                           placeholder="Enter bin plate ID (ABC1234)"
                                           pattern="[A-Z]{3}[0-9]{4}"
                                           title="Format: ABC1234 (3 uppercase letters followed by 4 numbers)"
                                           maxlength="7"
                                           style="text-transform: uppercase;" />
                                    <span asp-validation-for="Bin.BinPlateId" class="text-danger"></span>
                                </div>
                                <div class="mb-3">
                                    <label asp-for="Bin.Location" class="form-label"></label>
                                    <div class="location-input-container">
                                        <input asp-for="Bin.Location" class="form-control" id="binLocationInput" placeholder="Start typing location..." autocomplete="off" />
                                        <div id="locationSuggestions" class="location-suggestions"></div>
                                    </div>
                                    <span asp-validation-for="Bin.Location" class="text-danger"></span>
                                    <input type="hidden" asp-for="Bin.Latitude" id="binLatitude" />
                                    <input type="hidden" asp-for="Bin.Longitude" id="binLongitude" />
                                    <small class="text-muted">Selected coordinates will be saved automatically</small>
                                </div>
                                <div class="mb-3">
                                    <label asp-for="Bin.FillLevel" class="form-label"></label>
                                    <input asp-for="Bin.FillLevel" class="form-control" type="number" min="0" max="100" step="0.01" placeholder="Enter fill level %" />
                                    <span asp-validation-for="Bin.FillLevel" class="text-danger"></span>
                                </div>
                                <div class="mb-3">
                                    <label asp-for="Bin.Zone" class="form-label"></label>
                                    <input asp-for="Bin.Zone" class="form-control" placeholder="Enter zone" />
                                    <span asp-validation-for="Bin.Zone" class="text-danger"></span>
                                </div>
                                <div class="mb-3">
                                    <label asp-for="Bin.ClientID" class="form-label"></label>
                                    <select asp-for="Bin.ClientID" class="form-select" asp-items="@(new SelectList(Model.Clients, "ClientID", "ClientName"))">
                                        <option value="">-- Select Client --</option>
                                    </select>
                                    <span asp-validation-for="Bin.ClientID" class="text-danger"></span>
                                </div>
                                <button type="submit" class="btn btn-success w-100">
                                    <i class="fas fa-save me-2"></i>Create Bin
                                </button>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Bin List -->
                <div class="col-lg-8">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-list me-2"></i>Bin List
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (Model.Bins != null && Model.Bins.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Plate ID</th>
                                                <th>Location</th>
                                                <th>Fill Level</th>
                                                <th>Zone</th>
                                                <th>Client</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var bin in Model.Bins)
                                            {
                                                <tr>
                                                    <td><strong>@bin.BinPlateId</strong></td>
                                                    <td>@bin.Location</td>
                                                    <td>
                                                        <div class="progress" style="height: 20px;">
                                                            <div class="progress-bar @(bin.FillLevel >= 80 ? "bg-danger" : bin.FillLevel >= 60 ? "bg-warning" : "bg-success")"
                                                                 role="progressbar" style="width: @(bin.FillLevel)%">
                                                                @bin.FillLevel%
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td>@bin.Zone</td>
                                                    <td>@bin.Client?.ClientName</td>
                                                    <td>
                                                        <!-- Edit Button -->
                                                        <button type="button" class="btn btn-primary me-2" onclick="editBin('@bin.Id.ToString()')">
                                                            <i class="fas fa-edit me-1"></i>Edit
                                                        </button>
                                                        <!-- Delete Button -->
                                                        <button type="button" class="btn btn-danger" onclick="deleteBin('@bin.Id', '@bin.BinPlateId')">
                                                            <i class="fas fa-trash me-1"></i>Delete
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-5">
                                    <i class="fas fa-trash fa-3x text-muted mb-3"></i>
                                    <p class="text-muted">No bins found. Create your first bin to get started.</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Client Modal -->
<div class="modal fade" id="editClientModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="EditClient" method="post" id="editClientForm">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Client</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="editClientId" name="Client.ClientID" />
                    <div class="mb-3">
                        <label for="editClientName" class="form-label">Client Name</label>
                        <input type="text" class="form-control" id="editClientName" name="Client.ClientName" required />
                    </div>
                    <div class="mb-3">
                        <label for="editClientLocation" class="form-label">Location</label>
                        <input type="text" class="form-control" id="editClientLocation" name="Client.Location" required />
                    </div>
                    <div class="mb-3">
                        <label for="editClientNumOfBins" class="form-label">Number of Bins</label>
                        <input type="number" class="form-control" id="editClientNumOfBins" name="Client.NumOfBins" min="0" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Client</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Bin Modal -->
<div class="modal fade" id="editBinModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="EditBin" method="post" id="editBinForm">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Bin</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="editBinId" name="Bin.Id" />
                    <div class="mb-3">
                        <label for="editBinPlateId" class="form-label">Bin Plate ID</label>
                        <input type="text"
                               class="form-control"
                               id="editBinPlateId"
                               name="Bin.BinPlateId"
                               pattern="[A-Z]{3}[0-9]{4}"
                               title="Format: ABC1234 (3 uppercase letters followed by 4 numbers)"
                               maxlength="7"
                               style="text-transform: uppercase;"
                               required />
                    </div>
                    <div class="mb-3">
                        <label for="editBinLocation" class="form-label">Location</label>
                        <div class="location-input-container">
                            <input type="text" class="form-control" id="editBinLocation" name="Bin.Location" autocomplete="off" required />
                            <div id="editLocationSuggestions" class="location-suggestions"></div>
                        </div>
                        <input type="hidden" id="editBinLatitude" name="Bin.Latitude" />
                        <input type="hidden" id="editBinLongitude" name="Bin.Longitude" />
                        <small class="text-muted">Selected coordinates will be saved automatically</small>
                    </div>
                    <div class="mb-3">
                        <label for="editBinFillLevel" class="form-label">Fill Level (%)</label>
                        <input type="number" class="form-control" id="editBinFillLevel" name="Bin.FillLevel" min="0" max="100" step="0.01" required />
                    </div>
                    <div class="mb-3">
                        <label for="editBinZone" class="form-label">Zone</label>
                        <input type="text" class="form-control" id="editBinZone" name="Bin.Zone" required />
                    </div>
                    <div class="mb-3">
                        <label for="editBinClientID" class="form-label">Client</label>
                        <select class="form-select" id="editBinClientID" name="Bin.ClientID" required>
                            <option value="">-- Select Client --</option>
                            @foreach (var client in Model.Clients)
                            {
                                <option value="@client.ClientID">@client.ClientName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Bin</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Client management functions
        function editClient(clientId) {
            fetch(`/ClientBin/GetClient/${clientId}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('editClientId').value = data.clientID;
                    document.getElementById('editClientName').value = data.clientName;
                    document.getElementById('editClientLocation').value = data.location;
                    document.getElementById('editClientNumOfBins').value = data.numOfBins;
                    var modal = new bootstrap.Modal(document.getElementById('editClientModal'));
                    modal.show();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error loading client data');
                });
        }

        function deleteClient(clientId, clientName) {
            if (confirm(`Are you sure you want to delete client "${clientName}"?`)) {
                var form = document.createElement('form');
                form.method = 'POST';
                form.action = '/ClientBin/DeleteClientConfirmed';
                var input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'id';
                input.value = clientId;
                form.appendChild(input);
                var token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                var tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = token;
                form.appendChild(tokenInput);
                document.body.appendChild(form);
                form.submit();
            }
        }

        // Bin management functions
        function editBin(binId) {
        // Add some debugging
        console.log('Editing bin with ID:', binId);
        fetch(`/ClientBin/GetBin?id=${encodeURIComponent(binId)}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Received bin data:', data);
                document.getElementById('editBinId').value = data.id;
                document.getElementById('editBinPlateId').value = data.binPlateId;
                document.getElementById('editBinLocation').value = data.location;
                document.getElementById('editBinFillLevel').value = data.fillLevel;
                document.getElementById('editBinZone').value = data.zone;
                document.getElementById('editBinClientID').value = data.clientID;
            // Set coordinates if available
            if (data.latitude) {
                document.getElementById('editBinLatitude').value = data.latitude;
            }
            if (data.longitude) {
                document.getElementById('editBinLongitude').value = data.longitude;
            }
                var bootstrap = window.bootstrap; // Declare the bootstrap variable
                var modal = new bootstrap.Modal(document.getElementById('editBinModal'));
                modal.show();
            // Reinitialize location search for edit modal
            setTimeout(() => {
                setupLocationSearch('editBinLocation', 'editLocationSuggestions', 'editBinLatitude', 'editBinLongitude');
            }, 500);
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error loading bin data: ' + error.message);
            });
        }

        function deleteBin(binId, binPlateId) {
            if (confirm(`Are you sure you want to delete bin "${binPlateId}"?`)) {
                var form = document.createElement('form');
                form.method = 'POST';
                form.action = '/ClientBin/DeleteBinConfirmed';
                var input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'id';
                input.value = binId;
                form.appendChild(input);
                var token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                var tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = token;
                form.appendChild(tokenInput);
                document.body.appendChild(form);
                form.submit();
            }
        }

        // Auto-dismiss alerts after 5 seconds
        setTimeout(function() {
            var alerts = document.querySelectorAll('.alert-dismissible');
            alerts.forEach(function(alert) {
                var bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);

        // OpenStreetMap Location Search - No API key needed
        let searchTimeout;
        let editSearchTimeout;

        function setupLocationSearch(inputId, suggestionsId, latId, lonId) {
            const locationInput = document.getElementById(inputId);
            const suggestionsDiv = document.getElementById(suggestionsId);
            if (!locationInput || !suggestionsDiv) return;

            locationInput.addEventListener('input', function() {
                clearTimeout(inputId === 'binLocationInput' ? searchTimeout : editSearchTimeout);
                const query = this.value.trim();
                if (query.length < 3) {
                    suggestionsDiv.style.display = 'none';
                    return;
                }

                const timeout = setTimeout(async () => {
                    try {
                        // Using Nominatim API for Malaysia locations
                        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=5&countrycodes=MY&addressdetails=1`);
                        const results = await response.json();

                        suggestionsDiv.innerHTML = '';
                        if (results.length === 0) {
                            const noResults = document.createElement('div');
                            noResults.className = 'location-suggestion-item';
                            noResults.textContent = 'No locations found';
                            noResults.style.color = '#666';
                            noResults.style.fontStyle = 'italic';
                            suggestionsDiv.appendChild(noResults);
                        } else {
                            results.forEach(result => {
                                const div = document.createElement('div');
                                div.className = 'location-suggestion-item';
                                div.innerHTML = `
                                    <strong>${result.display_name.split(',')[0]}</strong><br>
                                    <small style="color: #666;">${result.display_name}</small>
                                `;
                                div.addEventListener('click', () => {
                                    locationInput.value = result.display_name;
                                    document.getElementById(latId).value = parseFloat(result.lat).toFixed(8);
                                    document.getElementById(lonId).value = parseFloat(result.lon).toFixed(8);
                                    suggestionsDiv.style.display = 'none';
                                    console.log('Coordinates saved:', result.lat, result.lon);
                                    // Show success feedback
                                    const feedback = document.createElement('div');
                                    feedback.style.cssText = 'color: green; font-size: 12px; margin-top: 5px;';
                                    feedback.textContent = `✓ Coordinates saved: ${parseFloat(result.lat).toFixed(6)}, ${parseFloat(result.lon).toFixed(6)}`;
                                    // Remove any existing feedback
                                    const existingFeedback = locationInput.parentNode.querySelector('.coordinate-feedback');
                                    if (existingFeedback) existingFeedback.remove();
                                    feedback.className = 'coordinate-feedback';
                                    locationInput.parentNode.appendChild(feedback);
                                    // Remove feedback after 3 seconds
                                    setTimeout(() => feedback.remove(), 3000);
                                });
                                suggestionsDiv.appendChild(div);
                            });
                        }
                        suggestionsDiv.style.display = 'block';
                    } catch (error) {
                        console.error('Location search error:', error);
                        suggestionsDiv.innerHTML = '<div class="location-suggestion-item" style="color: red;">Search error. Please try again.</div>';
                        suggestionsDiv.style.display = 'block';
                    }
                }, 500); // Increased delay to reduce API calls

                if (inputId === 'binLocationInput') {
                    searchTimeout = timeout;
                } else {
                    editSearchTimeout = timeout;
                }
            });

            // Hide suggestions when clicking outside
            document.addEventListener('click', function(e) {
                if (!locationInput.contains(e.target) && !suggestionsDiv.contains(e.target)) {
                    suggestionsDiv.style.display = 'none';
                }
            });
        }

        // Initialize location search when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Setup for create form
            setupLocationSearch('binLocationInput', 'locationSuggestions', 'binLatitude', 'binLongitude');
            // Setup for edit form (will be initialized when modal opens)
            setTimeout(() => {
                setupLocationSearch('editBinLocation', 'editLocationSuggestions', 'editBinLatitude', 'editBinLongitude');
            }, 1000);
        });
    </script>
    <script>
        // Add this function after the existing JavaScript functions
        function validateBinPlateId(plateId) {
            const regex = /^[A-Z]{3}\d{4}$/;
            return regex.test(plateId.toUpperCase());
        }

        function formatBinPlateId(input) {
            // Auto-format to uppercase and limit length
            let value = input.value.toUpperCase().replace(/[^A-Z0-9]/g, '');

            // Limit to 7 characters
            if (value.length > 7) {
                value = value.substring(0, 7);
            }

            input.value = value;

            // Real-time validation feedback
            const isValid = validateBinPlateId(value);
            const feedbackElement = input.parentNode.querySelector('.plate-id-feedback');

            // Remove existing feedback
            if (feedbackElement) {
                feedbackElement.remove();
            }

            if (value.length > 0) {
                const feedback = document.createElement('div');
                feedback.className = 'plate-id-feedback';
                feedback.style.cssText = 'font-size: 12px; margin-top: 5px;';

                if (isValid) {
                    feedback.style.color = 'green';
                    feedback.innerHTML = '✓ Valid format: ' + value;
                } else if (value.length === 7) {
                    feedback.style.color = 'red';
                    feedback.innerHTML = '✗ Invalid format. Use ABC1234 (3 letters + 4 numbers)';
                } else {
                    feedback.style.color = 'orange';
                    feedback.innerHTML = `Format: ABC1234 (${value.length}/7 characters)`;
                }

                input.parentNode.appendChild(feedback);
            }
        }

        // Update the form initialization
        document.addEventListener('DOMContentLoaded', function() {
            // Setup for create form
            setupLocationSearch('binLocationInput', 'locationSuggestions', 'binLatitude', 'binLongitude');

            // Add plate ID validation to create form
            const createPlateInput = document.querySelector('#createBinForm input[name="Bin.BinPlateId"]');
            if (createPlateInput) {
                createPlateInput.addEventListener('input', function() {
                    formatBinPlateId(this);
                });

                createPlateInput.addEventListener('blur', function() {
                    if (this.value && !validateBinPlateId(this.value)) {
                        this.setCustomValidity('Bin Plate ID must follow format ABC1234');
                    } else {
                        this.setCustomValidity('');
                    }
                });
            }

            // Setup for edit form (will be initialized when modal opens)
            setTimeout(() => {
                setupLocationSearch('editBinLocation', 'editLocationSuggestions', 'editBinLatitude', 'editBinLongitude');

                // Add plate ID validation to edit form
                const editPlateInput = document.getElementById('editBinPlateId');
                if (editPlateInput) {
                    editPlateInput.addEventListener('input', function() {
                        formatBinPlateId(this);
                    });

                    editPlateInput.addEventListener('blur', function() {
                        if (this.value && !validateBinPlateId(this.value)) {
                            this.setCustomValidity('Bin Plate ID must follow format ABC1234');
                        } else {
                            this.setCustomValidity('');
                        }
                    });
                }
            }, 1000);
        });
    </script>
}


